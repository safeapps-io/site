# Security

Most of the companies take at least some security measures, like SSL encryption or password hashing. Most won't go deep into details. We'll try to tell you about everything we do to keep your data safe.

A friendly reminder: all our code is available [on GitHub](https://github.com/safeapps-io), so you don't need to believe our words, you can check the source code for yourself. We'll add links where it is applicable.

## 3rd party scripts

Our basic requirement is that no external code should run in the context of the app. No visit trackers, no behavior analytics, no heatmap analyzers, or even error trackers. We guarantee this.

## Web App security

Some people find web apps unsafe to use. Due to the Web's dynamic nature, there are a few big security issues that can happen: malicious code can inject 3rd party untrusted code, track you and send the data somewhere.

But we adhere to the strictest security protocols. Thanks to [Content Security Policy](https://en.wikipedia.org/wiki/Content_Security_Policy) we make it impossible to inject untrusted code and to send requests to any servers except ours.

## Account access

The first question that pops up: can anyone get access to my account?

Usually, when someone tries to hack into your account, they do so using random passwords. We will not allow this. We limit the number of unsuccessful signings to your account [to 10 tries per day per account per IP](https://github.com/safeapps-io/money-back/blob/6687fba97e2bf311c93f29610b79f38e6f1b0259/src/controllers/auth/newUser.ts#L69) and [100 tries per day per account](https://github.com/safeapps-io/money-back/blob/6687fba97e2bf311c93f29610b79f38e6f1b0259/src/controllers/auth/newUser.ts#L78). It's more than enough for you to try to remember the right password, but for a hacker, it won't be enough to even warm up.

If we were to be hacked, you should know that we also hash passwords, but we use the algorithm called [Argon2](https://en.wikipedia.org/wiki/Argon2), which was selected as the winner of the Password Hashing Competition in July 2015.

Your account is safe with us.

## Data encryption

Our data encryption safety is is based on two great algorithms: [PBKDF2](https://en.wikipedia.org/wiki/PBKDF2) and [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard).

PBKDF2 is the algorithm that [creates](https://github.com/safeapps-io/money-client/blob/master/src/services/crypto/keys.ts#L42) a secure <mark class='green'>master key</mark> from your <mark>master password</mark>. It is the same algorithm that password managers like 1Password, KeePass, and Bitwarden use. If you use a strong enough <mark>master password</mark>, it may take trillions of years to brute force your <mark class='green'>master key</mark>.

It gets a little complicated from here:

- when you're busy creating a wallet, your device generates a <mark class='red'>secret key</mark>. Under the hood, we use it to encrypt this wallet's data. This key never leaves the device in plaintext — hence "secret".
- we then use your <mark class='green'>master key</mark> to [encrypt](https://github.com/safeapps-io/money-client/blob/master/src/services/crypto/keys.ts#L155) the <mark class='red'>secret key</mark> into a thing we call a <mark class='blue'>chest</mark>, which we upload to the server. Only you will be able to get the <mark class='red'>secret key</mark> out of the <mark class='blue'>chest</mark> on, say, another device because nobody but you know the <mark>master password</mark>.
- by the way, the said <mark class='red'>secret key</mark> is an AES with a [key length of 256 bit](https://github.com/safeapps-io/money-client/blob/master/src/utils/crypto/common.ts#L5). It is used by many governments in the world for transmitting top-secret information and [is practically impossible to crack](https://scrambox.com/article/brute-force-aes/).

So all and all your data is safe — even from us.

## How invites work

Here's where we use some more algorithms: [RSA-PSS](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) and [ECDH](https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman).

RSA-PSS is an asymmetric encryption algorithm. It means, it has two keys: one to encrypt or sign stuff (<mark class='gray'>private key</mark>) and the other — to decrypt or verify the signature (<mark class='cyan'>public key</mark>). When you signed up, your device generated a random key pair. The <mark class='gray'>private key</mark> is encrypted using your <mark class='green'>master key</mark>, the <mark class='cyan'>public key</mark> is uploaded as-is. It allows us to verify that the invite was in fact generated by this person, and also make sure nobody can generate those invite except you.

The invite is validated by both the backend and your device at each step of the invitation process, so we cannot do any shady business in the middle of the process.

Let's say <mark class='purple'>Alice</mark> invited <mark class='black'>Bob</mark> to her wallet.

The main problem with invites is that we need to securely transfer the <mark class='red'>secret key</mark> for the wallet from <mark class='purple'>Alice</mark> to <mark class='black'>Bob</mark> without compromising their <mark class='green'>master keys</mark> — as you remember, <mark class='blue'>chests</mark> are encrypted with it.

This is where ECDH shines. ECDH is an algorithm that helps two parties to agree about the encryption key they should use while transmitting the data through an untrusted intermediary — this should be our servers in this case. 

The process is even more complicated, but we'll try to explain it:

1. <mark class='black'>Bob</mark> generates an ECDH key pair. Yes, it also goes in pairs with the same rules: the <mark class='cyan'>public one</mark> can be viewed by anybody and the <mark class='gray'>private one</mark> should be kept secret.
2. <mark class='black'>Bob</mark> sends the <mark class='cyan'>public key</mark> and the invite. At the same time the device displays a hash representation of the <mark class='cyan'>public key</mark> — we show both a SHA-512 and a set of emojis to make the thing beautiful.
3. <mark class='purple'>Alice</mark> checks if the invite was in fact created by her. If so, the app asks if she wants <mark class='black'>Bob</mark> to join the wallet, while showing the hash representation of <mark class='black'>Bob's</mark> <mark class='cyan'>public key</mark>. It's a very important part: <mark class='purple'>Alice</mark> and <mark class='black'>Bob</mark> should make sure the hashes are the same, because if they are not, the server could have changed the <mark class='cyan'>public key</mark>, making the whole transmission unsafe!
4. once <mark class='purple'>Alice</mark> allows <mark class='black'>Bob</mark> to join, her device also generates an ECDH keypair. 
  Here's where the *magic math* ✨ happens: if you know your <mark class='gray'>private key</mark> and other person's <mark class='cyan'>public key</mark>, you can safely *derive* a new encryption key, that will be the same for the second person! At the same time if you only know two <mark class='cyan'>public keys</mark> — the stuff that the server sees while transmitting the data — you cannot do anything at all.
5. so <mark class='purple'>Alice</mark> generates a key from <mark class='black'>Bob's</mark> <mark class='cyan'>public key</mark> and her <mark class='gray'>private key</mark> — we'll call it the <mark class='darkgreen'>invite key</mark>. She then and encrypts the <mark class='red'>secret key</mark> using it and passes it to <mark class='black'>Bob</mark> along with her <mark class='cyan'>public key</mark>.
6. <mark class='black'>Bob</mark> receives the message. He, in turn, derives the <mark class='darkgreen'>invite key</mark> using his <mark class='gray'>private key</mark> and <mark class='purple'>Alice's</mark> <mark class='cyan'>public key</mark> and decrypt the <mark class='red'>secret key</mark>.

Boy, that's a lot of text and highlights. Most of the action happens [in this file](https://github.com/safeapps-io/money-client/blob/master/src/services/invite/inviteService.ts).

So even we cannot trick you into sharing your keys with us.
